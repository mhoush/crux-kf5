diff --git a/project/projectconfigskeleton.h b/project/projectconfigskeleton.h
index ed17ed0..71d731a 100644
--- a/project/projectconfigskeleton.h
+++ b/project/projectconfigskeleton.h
@@ -33,16 +33,6 @@ class KDEVPLATFORMPROJECT_EXPORT ProjectConfigSkeleton: public KConfigSkeleton
 {
     Q_OBJECT
 public:
-
-    /**
-     * Constructs a new skeleton, the skeleton will write to the developer
-     * configuration file, which is by default located in projectdir/.kdev4
-     * The defaults will be set from the project file, which is in the projectdir
-     *
-     * @param configname The absolute filename of the developer configuration file
-     */
-    explicit ProjectConfigSkeleton( const QString & configname );
-
     ~ProjectConfigSkeleton() override;
 
     void setDeveloperTempFile( const QString& );
@@ -55,6 +45,18 @@ public:
 
     Path projectFile() const;
     Path developerFile() const;
+
+protected:
+    /**
+     * Constructs a new skeleton, the skeleton will write to the developer
+     * configuration file, which is by default located in projectdir/.kdev4
+     * The defaults will be set from the project file, which is in the projectdir
+     *
+     * @param configname The absolute filename of the developer configuration file
+     */
+    explicit ProjectConfigSkeleton( const QString & configname );
+    explicit ProjectConfigSkeleton( KSharedConfigPtr config );
+
 private:
     /**
      * There's no way in KDE4 API to find out the file that the config object
@@ -62,9 +64,11 @@ private:
      * constructors. Thus I'm making this private, so we can find out when
      * this constructor is used and see if we need to add appropriate API to
      * kdelibs
+     *
+     * Undone for the constructor with KSharedConfigPtr because kconfig >= 5.3.0
+     * needs it.
      */
-     explicit ProjectConfigSkeleton( KSharedConfigPtr config );
-     struct ProjectConfigSkeletonPrivate * const d;
+    struct ProjectConfigSkeletonPrivate * const d;
 };
 
 }
